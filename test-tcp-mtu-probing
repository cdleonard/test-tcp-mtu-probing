#! /bin/bash -e

clean_netns()
{
    if ip netns list | grep -q "$1"; then
        ip netns del "$1"
    fi
}

# If $pid is set then kill wait unset
clean_bgpid()
{
    local pid=$1
    if [[ -n ${!pid} ]]; then
        kill -9 "${!pid}"
        wait "${!pid}" || true
        unset "$pid"
    fi
}

clean()
{
    clean_bgpid iperf_client_pid
    clean_bgpid iperf_server_pid
    clean_bgpid watch_ss_client_pid
    clean_bgpid watch_ss_server_pid
    clean_bgpid tcpdump_client_pid
    clean_bgpid tcpdump_server_pid
    clean_bgpid tail_pid
    clean_netns ns_client
    clean_netns ns_middle
    clean_netns ns_server
    if [[ -n $tmpdir ]]; then
        rm -rf "$tmpdir"
        unset tmpdir
    fi
}

wait_loop()
{
    local max_iter=$TIMEOUT_SEC
    local sleep_interval=1
    local cmd=("$@")
    for ((iter = 0; iter < max_iter; ++iter)); do
        if "${cmd[@]}"; then
            return 0
        fi
        sleep "$sleep_interval"
    done
    return 2
}

# extra field from ss --info output
extract_ss_info_field()
{
    sed -ne "s/.* ${1}:\([0-9]\+\) .*/\1/pg"
}

# Assigned to the ss_mss and ss_reordering variables
parse_current_ss_client_info()
{
    local lastline
    lastline=$(tail -n1 "$LOG_DIR/watch_ss_client.log")
    ss_mss=$(echo "$lastline"|extract_ss_info_field mss)
    ss_reordering=$(echo "$lastline"|extract_ss_info_field reordering)
}

check_mss_lo()
{
    local ss_mss ss_reordering
    parse_current_ss_client_info
    echo "check mss $ss_mss decreases to lo mtu $MTU_VALUE_LO curr reordering=${ss_reordering}"
    [[ $ss_mss -lt $MTU_VALUE_LO ]]
}

check_mss_hi()
{
    local ss_mss ss_reordering
    parse_current_ss_client_info
    echo "check mss $ss_mss increases to hi mtu $MTU_VALUE_HI curr reordering=${ss_reordering}"
    [[ $ss_mss -gt $((MTU_VALUE_HI - 100)) ]]
}

main()
{
    # Can be set externally:
    CLEAN=${CLEAN:-1}
    # Timeout in seconds
    TIMEOUT_SEC=${TIMEOUT_SEC:-30}
    # If set to 1 then run tcpdump (default 0)
    RUN_TCPDUMP=${RUN_TCPDUMP:-0}
    # If set to 1 then blackhole ICMPs
    ICMP_BLACKHOLE=${ICMP_BLACKHOLE:-0}
    # Override /proc/sys/net/ipv4/route/mtu_expires
    IPV4_MTU_EXPIRES=${IPV4_MTU_EXPIRES:-5}
    # Override sysctl net.ipv4.tcp_mtu_probing
    TCP_MTU_PROBING=${TCP_MTU_PROBING:-}
    # Override sysctl net.ipv4.tcp_probe_interval
    TCP_PROBE_INTERVAL=${TCP_MTU_PROBE_INTERVAL:-5}
    # Low value for MTU test
    MTU_VALUE_LO=${MTU_VALUE_LO:-3000}
    # High value for MTU test
    MTU_VALUE_HI=${MTU_VALUE_HI:-9200}
    # Use iperf3
    IPERF_V3=${IPERF_V3:-0}
    # IPERF --bandwith argument
    IPERF_BANDWIDTH=${IPERF_BANDWIDTH:-1024k}
    IPERF_SERVER_BANDWIDTH=${IPERF_SERVER_BANDWIDTH:-$IPERF_BANDWIDTH}
    IPERF_CLIENT_BANDWIDTH=${IPERF_CLIENT_BANDWIDTH:-$IPERF_BANDWIDTH}
    # IPERF --len argument
    IPERF_LEN=${IPERF_LEN:-128k}
    IPERF_SERVER_LEN=${IPERF_SERVER_LEN:-$IPERF_LEN}
    IPERF_CLIENT_LEN=${IPERF_CLIENT_LEN:-$IPERF_LEN}
    # iperf --window argument (no custom default)
    IPERF_WINDOW=${IPERF_WINDOW:-}
    IPERF_SERVER_WINDOW=${IPERF_SERVER_WINDOW:-$IPERF_WINDOW}
    IPERF_CLIENT_WINDOW=${IPERF_CLIENT_WINDOW:-$IPERF_WINDOW}

    # build iperf arguments
    local IPERF_COMMON_ARGS=(--interval 1)
    local IPERF_CLIENT_ARGS=()
    local IPERF_SERVER_ARGS=()

    # Executable for iperf (default iperf in path)
    if [[ -z $IPERF_EXECUTABLE ]]; then
        if [[ $IPERF_V3 == 1 ]]; then
            IPERF_EXECUTABLE=iperf3
        else
            IPERF_EXECUTABLE=iperf
        fi
    fi

    [[ -n $IPERF_CLIENT_BANDWIDTH ]] && IPERF_CLIENT_ARGS+=(--bandwidth "$IPERF_CLIENT_BANDWIDTH")
    [[ $IPERF_V3 == 0 && -n $IPERF_SERVER_BANDWIDTH ]] && IPERF_SERVER_ARGS+=(--bandwidth "$IPERF_SERVER_BANDWIDTH")
    [[ -n $IPERF_CLIENT_WINDOW ]] && IPERF_CLIENT_ARGS+=(--window "$IPERF_CLIENT_WINDOW")
    [[ $IPERF_V3 == 0 && -n $IPERF_SERVER_WINDOW ]] && IPERF_SERVER_ARGS+=(--window "$IPERF_SERVER_WINDOW")
    [[ -n $IPERF_CLIENT_LEN ]] && IPERF_CLIENT_ARGS+=(--len "$IPERF_CLIENT_LEN")
    [[ $IPERF_V3 == 0 && -n $IPERF_SERVER_LEN ]] && IPERF_SERVER_ARGS+=(--len "$IPERF_SERVER_LEN")

    clean
    if [[ $CLEAN == 1 ]]; then
        trap clean EXIT
    fi
    if [[ -z $LOG_DIR ]]; then
        tmpdir=$(mktemp -d -t "test-tcp-mtu-probing-XXXXX")
        LOG_DIR=$tmpdir
        echo "Use temporary LOG_DIR: $LOG_DIR" >&2
    else
        mkdir -p "$LOG_DIR"
        echo "Use provided LOG_DIR: $LOG_DIR" >&2
    fi

    ip netns add ns_client
    ip netns add ns_middle
    ip netns add ns_server

    ip netns exec ns_client ip link add veth_middle type veth peer name veth_client netns ns_middle
    ip netns exec ns_client ip addr add dev veth_middle 12.0.0.1/24
    ip netns exec ns_client ip link set veth_middle up mtu "$MTU_VALUE_HI"
    ip netns exec ns_middle ip addr add dev veth_client 12.0.0.2/24
    ip netns exec ns_middle ip link set veth_client up mtu "$MTU_VALUE_HI"

    ip netns exec ns_server ip link add veth_middle type veth peer name veth_server netns ns_middle
    ip netns exec ns_server ip addr add dev veth_middle 23.0.0.3/24
    ip netns exec ns_server ip link set veth_middle up mtu "$MTU_VALUE_HI"
    ip netns exec ns_middle ip addr add dev veth_server 23.0.0.2/24
    ip netns exec ns_middle ip link set veth_server up mtu "$MTU_VALUE_HI"

    ip netns exec ns_client ip route add 23.0.0.0/24 via 12.0.0.2
    ip netns exec ns_server ip route add 12.0.0.0/24 via 23.0.0.2
    ip netns exec ns_middle sysctl -w net.ipv4.ip_forward=1

    # Do proper skb segmentation, no optimizations
    ip netns exec ns_client ethtool -K veth_middle gso off tso off

    if [[ $ICMP_BLACKHOLE == 1 ]]; then
        ip netns exec ns_middle iptables -A INPUT -p icmp -j REJECT
        ip netns exec ns_middle iptables -A OUTPUT -p icmp -j REJECT
    fi

    if [[ $RUN_TCPDUMP == 1 ]]; then
        ip netns exec ns_client tcpdump -vvn -i veth_middle -w "$LOG_DIR/capture_client.pcap" &
        tcpdump_client_pid=$!
        ip netns exec ns_server tcpdump -vvn -i veth_middle -w "$LOG_DIR/capture_server.pcap" &
        tcpdump_server_pid=$!
    fi

    if false; then
        if ip netns exec ns_client ping -c3 23.0.0.3; then
            echo "ok - can ping from client to server"
        else
            echo "not ok - fail to ping from client to server"
        fi
    fi

    if [[ -n $TCP_MTU_PROBING ]]; then
        ip netns exec ns_client sysctl -w net.ipv4.tcp_mtu_probing="$TCP_MTU_PROBING"
    fi
    if [[ -n $TCP_PROBE_INTERVAL ]]; then
        ip netns exec ns_client sysctl -w net.ipv4.tcp_probe_interval="$TCP_PROBE_INTERVAL"
    fi
    if [[ -n $IPV4_MTU_EXPIRES ]]; then
        sh -c "echo '$IPV4_MTU_EXPIRES' > /proc/sys/net/ipv4/route/mtu_expires"
    fi

    # Print relevant sysctls:
    ip netns exec ns_client sysctl \
            net.ipv4.ip_no_pmtu_disc \
            net.ipv4.tcp_mtu_probing \
            net.ipv4.tcp_probe_interval \
            net.ipv4.tcp_max_reordering \
            net.ipv4.tcp_probe_threshold
    ip netns exec ns_client sysctl net.ipv4.tcp_mtu_probe_floor || true
    echo "/proc/sys/net/ipv4/route/mtu_expires: $(cat /proc/sys/net/ipv4/route/mtu_expires)"

    if [[ -n $EXTRA_CLIENT_CMD ]]; then
        ip netns exec ns_client sh -c "$EXTRA_CLIENT_CMD"
    fi
    if [[ -n $EXTRA_SERVER_CMD ]]; then
        ip netns exec ns_client sh -c "$EXTRA_SERVER_CMD"
    fi

    IPERF_SERVER_CMD=(
        ${IPERF_EXECUTABLE}
        --server
        --bind 23.0.0.3
        "${IPERF_COMMON_ARGS[@]}"
        "${IPERF_SERVER_ARGS[@]}"
        $IPERF_SERVER_EXTRA_ARGS
    )
    echo "RUN: ${IPERF_SERVER_CMD[*]}"
    ip netns exec ns_server "${IPERF_SERVER_CMD[@]}" &> "$LOG_DIR/iperf_server.log" &
    iperf_server_pid=$!
    sleep 1

    IPERF_CLIENT_CMD=(
        ${IPERF_EXECUTABLE}
        --client 23.0.0.3
        --time 86400
        "${IPERF_COMMON_ARGS[@]}"
        "${IPERF_CLIENT_ARGS[@]}"
        $IPERF_CLIENT_EXTRA_ARGS
    )
    echo "RUN: ${IPERF_CLIENT_CMD[*]}"
    ip netns exec ns_client "${IPERF_CLIENT_CMD[@]}" &> "$LOG_DIR/iperf_client.log" &
    iperf_client_pid=$!

    SS_ARGS="--no-header --tcp --info --memory"
    ip netns exec ns_client bash -c "while true; do ss $SS_ARGS &>> '$LOG_DIR/watch_ss_client.log'; sleep 1; done" &
    watch_ss_client_pid=$!
    ip netns exec ns_server bash -c "while true; do ss $SS_ARGS &>> '$LOG_DIR/watch_ss_server.log'; sleep 1; done" &
    watch_ss_server_pid=$!

    #tail -F "$LOG_DIR/watch_ss_client.log" "$LOG_DIR/watch_ss_server.log"  &
    #tail_pid=$!

    if wait_loop check_mss_hi; then
        echo "ok - reached hi mss"
    else
        echo "not ok - failed to reach hi mss"
        exit 1
    fi

    echo "enter lo-mtu state"
    ip netns exec ns_middle ip link set veth_server mtu "$MTU_VALUE_LO"

    if wait_loop check_mss_lo; then
        echo "ok - reached lo mss"
    else
        echo "not ok - failed to reach lo mss"
        exit 1
    fi

    echo "restore hi-mtu state:"
    ip netns exec ns_middle ip link set veth_server mtu "$MTU_VALUE_HI"
    sleep 3

    if wait_loop check_mss_hi; then
        echo "ok - reached restored hi mss"
    else
        echo "not ok - failed to reach restored hi mss"
        exit 1
    fi
    exit 0
}

main "$@"
